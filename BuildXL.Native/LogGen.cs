// <auto-generated/>
#nullable enable
namespace BuildXL.Native.Tracing
{
    using System.Diagnostics.Tracing;
    using BuildXL.Native;

#pragma warning disable 219
    /// <summary>
    /// Logger interface
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("csc.exe", "4.1100.24.46003")]
    public interface INativeLogger : global::BuildXL.Utilities.Instrumentation.Common.ILogger
    {
        /// <summary>
        /// (Verbose) - Directory delete for '{path}' failed. An error will be thrown.
        /// </summary>
        void FileUtilitiesDirectoryDeleteFailed(global::BuildXL.Utilities.Instrumentation.Common.LoggingContext context, string path);
        /// <summary>
        /// (Verbose) - Diagnostic for '{path}': {description}
        /// </summary>
        void FileUtilitiesDiagnostic(global::BuildXL.Utilities.Instrumentation.Common.LoggingContext context, string path, string description);
        /// <summary>
        /// (Verbose) - Retry attempt failed with exception. {exception}
        /// </summary>
        void RetryOnFailureException(global::BuildXL.Utilities.Instrumentation.Common.LoggingContext context, string exception);
        /// <summary>
        /// (Verbose) - Attempting to set ownership and ACL to path '{path}'.
        /// </summary>
        void SettingOwnershipAndAcl(global::BuildXL.Utilities.Instrumentation.Common.LoggingContext context, string path);
        /// <summary>
        /// (Verbose) - Failed to set ownership and ACL to path '{path}'. Command {filename} {arguments} {reason}
        /// </summary>
        void SettingOwnershipAndAclFailed(global::BuildXL.Utilities.Instrumentation.Common.LoggingContext context, string path, string filename, string arguments, string reason);
        /// <summary>
        /// (Verbose) - Read USN: (id {0:X16}-{1:X16}) @ {2:X16}
        /// </summary>
        void StorageReadUsn(global::BuildXL.Utilities.Instrumentation.Common.LoggingContext context, ulong idHigh, ulong idLow, ulong usn);
        /// <summary>
        /// (Verbose) - Checkpoint (new USN): {0:X16}
        /// </summary>
        void StorageCheckpointUsn(global::BuildXL.Utilities.Instrumentation.Common.LoggingContext context, ulong newUsn);
        /// <summary>
        /// (Verbose) - Creating a file handle for path {0} (disposition 0x{1:X8}) failed with HRESULT 0x{2:X8}
        /// </summary>
        void StorageTryOpenOrCreateFileFailure(global::BuildXL.Utilities.Instrumentation.Common.LoggingContext context, string path, int creationDisposition, int hresult);
        /// <summary>
        /// (Verbose) - Opening a directory handle for path {0} failed with HRESULT 0x{1:X8}
        /// </summary>
        void StorageTryOpenDirectoryFailure(global::BuildXL.Utilities.Instrumentation.Common.LoggingContext context, string path, int hresult);
        /// <summary>
        /// (Verbose) - Found volume {0} (serial: {1:X16})
        /// </summary>
        void StorageFoundVolume(global::BuildXL.Utilities.Instrumentation.Common.LoggingContext context, string volumeGuidPath, ulong serial);
        /// <summary>
        /// (Verbose) - Opening the file with file ID {0:X16}-{1:X16} on {2:X16} failed with HRESULT 0x{3:X8}
        /// </summary>
        void StorageTryOpenFileByIdFailure(global::BuildXL.Utilities.Instrumentation.Common.LoggingContext context, ulong idHigh, ulong idLow, ulong volumeSerial, int hresult);
        /// <summary>
        /// (Warning) - [{pipDescription}] AccessViolationException is occurred in Detours.
        /// </summary>
        void DetouredProcessAccessViolationException(global::BuildXL.Utilities.Instrumentation.Common.LoggingContext context, string pipDescription);
        /// <summary>
        /// (Verbose) - More bytes written than the buffer size: {bytesWritten} &amp;gt; {bufferSizeInBytes}. NumAssignedProcess: {numAssignedProcesses}, NumProcessIdsInList: {numProcessIdsInList}.
        /// </summary>
        void MoreBytesWrittenThanBufferSize(global::BuildXL.Utilities.Instrumentation.Common.LoggingContext context, long bytesWritten, long bufferSizeInBytes, long numAssignedProcesses, long numProcessIdsInList);
    }

    /// <summary>
    /// Instance based logger
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("csc.exe", "4.1100.24.46003")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public class Log
    {
        /// <summary>
        /// The static logger this delegates to
        /// </summary>
        private Logger m_logger;
        /// <summary>
        /// The logging context to use.
        /// </summary>
        public global::BuildXL.Utilities.Instrumentation.Common.LoggingContext LoggingContext { get; }

        /// <summary>
        /// Creates a new instnce base logger.
        /// </summary>
        public Log(global::BuildXL.Utilities.Instrumentation.Common.LoggingContext loggingContext, bool preserveLogEvents = false)
        {
            m_logger = Logger.CreateLogger(preserveLogEvents);
            LoggingContext = loggingContext;
        }

        /// <summary>
        /// Verbose DX0698: Directory delete for '{path}' failed. An error will be thrown.
        /// </summary>
        public void FileUtilitiesDirectoryDeleteFailed(global::BuildXL.Utilities.Instrumentation.Common.LoggingContext context, string path)
        {
            m_logger.FileUtilitiesDirectoryDeleteFailed(context, path);
        }

        /// <summary>
        /// Verbose DX0699: Diagnostic for '{path}': {description}
        /// </summary>
        public void FileUtilitiesDiagnostic(global::BuildXL.Utilities.Instrumentation.Common.LoggingContext context, string path, string description)
        {
            m_logger.FileUtilitiesDiagnostic(context, path, description);
        }

        /// <summary>
        /// Verbose DX0744: Retry attempt failed with exception. {exception}
        /// </summary>
        public void RetryOnFailureException(global::BuildXL.Utilities.Instrumentation.Common.LoggingContext context, string exception)
        {
            m_logger.RetryOnFailureException(context, exception);
        }

        /// <summary>
        /// Verbose DX0704: Attempting to set ownership and ACL to path '{path}'.
        /// </summary>
        public void SettingOwnershipAndAcl(global::BuildXL.Utilities.Instrumentation.Common.LoggingContext context, string path)
        {
            m_logger.SettingOwnershipAndAcl(context, path);
        }

        /// <summary>
        /// Verbose DX0705: Failed to set ownership and ACL to path '{path}'. Command {filename} {arguments} {reason}
        /// </summary>
        public void SettingOwnershipAndAclFailed(global::BuildXL.Utilities.Instrumentation.Common.LoggingContext context, string path, string filename, string arguments, string reason)
        {
            m_logger.SettingOwnershipAndAclFailed(context, path, filename, arguments, reason);
        }

        /// <summary>
        /// Verbose DX0713: Read USN: (id {0:X16}-{1:X16}) @ {2:X16}
        /// </summary>
        public void StorageReadUsn(global::BuildXL.Utilities.Instrumentation.Common.LoggingContext context, ulong idHigh, ulong idLow, ulong usn)
        {
            m_logger.StorageReadUsn(context, idHigh, idLow, usn);
        }

        /// <summary>
        /// Verbose DX0716: Checkpoint (new USN): {0:X16}
        /// </summary>
        public void StorageCheckpointUsn(global::BuildXL.Utilities.Instrumentation.Common.LoggingContext context, ulong newUsn)
        {
            m_logger.StorageCheckpointUsn(context, newUsn);
        }

        /// <summary>
        /// Verbose DX0724: Creating a file handle for path {0} (disposition 0x{1:X8}) failed with HRESULT 0x{2:X8}
        /// </summary>
        public void StorageTryOpenOrCreateFileFailure(global::BuildXL.Utilities.Instrumentation.Common.LoggingContext context, string path, int creationDisposition, int hresult)
        {
            m_logger.StorageTryOpenOrCreateFileFailure(context, path, creationDisposition, hresult);
        }

        /// <summary>
        /// Verbose DX0720: Opening a directory handle for path {0} failed with HRESULT 0x{1:X8}
        /// </summary>
        public void StorageTryOpenDirectoryFailure(global::BuildXL.Utilities.Instrumentation.Common.LoggingContext context, string path, int hresult)
        {
            m_logger.StorageTryOpenDirectoryFailure(context, path, hresult);
        }

        /// <summary>
        /// Verbose DX0721: Found volume {0} (serial: {1:X16})
        /// </summary>
        public void StorageFoundVolume(global::BuildXL.Utilities.Instrumentation.Common.LoggingContext context, string volumeGuidPath, ulong serial)
        {
            m_logger.StorageFoundVolume(context, volumeGuidPath, serial);
        }

        /// <summary>
        /// Verbose DX0722: Opening the file with file ID {0:X16}-{1:X16} on {2:X16} failed with HRESULT 0x{3:X8}
        /// </summary>
        public void StorageTryOpenFileByIdFailure(global::BuildXL.Utilities.Instrumentation.Common.LoggingContext context, ulong idHigh, ulong idLow, ulong volumeSerial, int hresult)
        {
            m_logger.StorageTryOpenFileByIdFailure(context, idHigh, idLow, volumeSerial, hresult);
        }

        /// <summary>
        /// Warning DX0734: [{pipDescription}] AccessViolationException is occurred in Detours.
        /// </summary>
        public void DetouredProcessAccessViolationException(global::BuildXL.Utilities.Instrumentation.Common.LoggingContext context, string pipDescription)
        {
            m_logger.DetouredProcessAccessViolationException(context, pipDescription);
        }

        /// <summary>
        /// Verbose DX2930: More bytes written than the buffer size: {bytesWritten} &gt; {bufferSizeInBytes}. NumAssignedProcess: {numAssignedProcesses}, NumProcessIdsInList: {numProcessIdsInList}.
        /// </summary>
        public void MoreBytesWrittenThanBufferSize(global::BuildXL.Utilities.Instrumentation.Common.LoggingContext context, long bytesWritten, long bufferSizeInBytes, long numAssignedProcesses, long numProcessIdsInList)
        {
            m_logger.MoreBytesWrittenThanBufferSize(context, bytesWritten, bufferSizeInBytes, numAssignedProcesses, numProcessIdsInList);
        }
    }

    /// <summary>
    /// Logging Instantiation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("csc.exe", "4.1100.24.46003")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public partial class Logger : global::BuildXL.Utilities.Instrumentation.Common.LoggerBase
    {
        static private Logger m_log = new LoggerImpl();
        /// <summary>
        /// Factory method that creates instances of the logger.
        /// </summary>
        public static Logger CreateLogger(bool preserveLogEvents = false)
        {
            return new LoggerImpl
            {
                PreserveLogEvents = preserveLogEvents,
                InspectMessageEnabled = preserveLogEvents,
            };
        }

        /// <summary>
        /// Factory method that creates instances of the logger that tracks errors and allows for observers
        /// </summary>
        public static Logger CreateLoggerWithTracking(bool preserveLogEvents = false)
        {
            return new LoggerImpl
            {
                PreserveLogEvents = preserveLogEvents,
                InspectMessageEnabled = true,
            };
        }

        /// <summary>
        /// Logging implementation
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("csc.exe", "4.1100.24.46003")]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        private class LoggerImpl : Logger
        {
            /// <summary>
            /// Logging implementation
            /// </summary>
            public override void FileUtilitiesDirectoryDeleteFailed(global::BuildXL.Utilities.Instrumentation.Common.LoggingContext context, string path)
            {
                if (context.IsAsyncLoggingEnabled)
                {
                    EnqueueLogAction(context, 698, () => FileUtilitiesDirectoryDeleteFailed_Core(context, path));
                }
                else
                {
                    FileUtilitiesDirectoryDeleteFailed_Core(context, path);
                }
            }

            private void FileUtilitiesDirectoryDeleteFailed_Core(global::BuildXL.Utilities.Instrumentation.Common.LoggingContext context, string path)
            {
                if (BuildXL.Native.ETWLogger.Log.IsEnabled(EventLevel.Verbose, (EventKeywords)1))
                {
                    BuildXL.Native.ETWLogger.Log.FileUtilitiesDirectoryDeleteFailed(context.Session.RelatedActivityId, path);
                }

                if (InspectMessageEnabled)
                {
                    InspectMessage(698, EventLevel.Verbose, string.Format(System.Globalization.CultureInfo.InvariantCulture, "Directory delete for '{0}' failed. An error will be thrown.", path, path), null);
                }
            }

            /// <summary>
            /// Logging implementation
            /// </summary>
            public override void FileUtilitiesDiagnostic(global::BuildXL.Utilities.Instrumentation.Common.LoggingContext context, string path, string description)
            {
                if (context.IsAsyncLoggingEnabled)
                {
                    EnqueueLogAction(context, 699, () => FileUtilitiesDiagnostic_Core(context, path, description));
                }
                else
                {
                    FileUtilitiesDiagnostic_Core(context, path, description);
                }
            }

            private void FileUtilitiesDiagnostic_Core(global::BuildXL.Utilities.Instrumentation.Common.LoggingContext context, string path, string description)
            {
                if (BuildXL.Native.ETWLogger.Log.IsEnabled(EventLevel.Verbose, (EventKeywords)268435457))
                {
                    BuildXL.Native.ETWLogger.Log.FileUtilitiesDiagnostic(context.Session.RelatedActivityId, path, description);
                }

                if (InspectMessageEnabled)
                {
                    InspectMessage(699, EventLevel.Verbose, string.Format(System.Globalization.CultureInfo.InvariantCulture, "Diagnostic for '{0}': {1}", path, description, path, description), null);
                }
            }

            /// <summary>
            /// Logging implementation
            /// </summary>
            public override void RetryOnFailureException(global::BuildXL.Utilities.Instrumentation.Common.LoggingContext context, string exception)
            {
                if (context.IsAsyncLoggingEnabled)
                {
                    EnqueueLogAction(context, 744, () => RetryOnFailureException_Core(context, exception));
                }
                else
                {
                    RetryOnFailureException_Core(context, exception);
                }
            }

            private void RetryOnFailureException_Core(global::BuildXL.Utilities.Instrumentation.Common.LoggingContext context, string exception)
            {
                if (BuildXL.Native.ETWLogger.Log.IsEnabled(EventLevel.Verbose, (EventKeywords)268435457))
                {
                    BuildXL.Native.ETWLogger.Log.RetryOnFailureException(context.Session.RelatedActivityId, exception);
                }

                if (InspectMessageEnabled)
                {
                    InspectMessage(744, EventLevel.Verbose, string.Format(System.Globalization.CultureInfo.InvariantCulture, "Retry attempt failed with exception. {0}", exception, exception), null);
                }
            }

            /// <summary>
            /// Logging implementation
            /// </summary>
            public override void SettingOwnershipAndAcl(global::BuildXL.Utilities.Instrumentation.Common.LoggingContext context, string path)
            {
                if (context.IsAsyncLoggingEnabled)
                {
                    EnqueueLogAction(context, 704, () => SettingOwnershipAndAcl_Core(context, path));
                }
                else
                {
                    SettingOwnershipAndAcl_Core(context, path);
                }
            }

            private void SettingOwnershipAndAcl_Core(global::BuildXL.Utilities.Instrumentation.Common.LoggingContext context, string path)
            {
                if (BuildXL.Native.ETWLogger.Log.IsEnabled(EventLevel.Verbose, (EventKeywords)1))
                {
                    BuildXL.Native.ETWLogger.Log.SettingOwnershipAndAcl(context.Session.RelatedActivityId, path);
                }

                if (InspectMessageEnabled)
                {
                    InspectMessage(704, EventLevel.Verbose, string.Format(System.Globalization.CultureInfo.InvariantCulture, "Attempting to set ownership and ACL to path '{0}'.", path, path), null);
                }
            }

            /// <summary>
            /// Logging implementation
            /// </summary>
            public override void SettingOwnershipAndAclFailed(global::BuildXL.Utilities.Instrumentation.Common.LoggingContext context, string path, string filename, string arguments, string reason)
            {
                if (context.IsAsyncLoggingEnabled)
                {
                    EnqueueLogAction(context, 705, () => SettingOwnershipAndAclFailed_Core(context, path, filename, arguments, reason));
                }
                else
                {
                    SettingOwnershipAndAclFailed_Core(context, path, filename, arguments, reason);
                }
            }

            private void SettingOwnershipAndAclFailed_Core(global::BuildXL.Utilities.Instrumentation.Common.LoggingContext context, string path, string filename, string arguments, string reason)
            {
                if (BuildXL.Native.ETWLogger.Log.IsEnabled(EventLevel.Verbose, (EventKeywords)1))
                {
                    BuildXL.Native.ETWLogger.Log.SettingOwnershipAndAclFailed(context.Session.RelatedActivityId, path, filename, arguments, reason);
                }

                if (InspectMessageEnabled)
                {
                    InspectMessage(705, EventLevel.Verbose, string.Format(System.Globalization.CultureInfo.InvariantCulture, "Failed to set ownership and ACL to path '{0}'. Command {1} {2} {3}", path, filename, arguments, reason, path, filename, arguments, reason), null);
                }
            }

            /// <summary>
            /// Logging implementation
            /// </summary>
            public override void StorageReadUsn(global::BuildXL.Utilities.Instrumentation.Common.LoggingContext context, ulong idHigh, ulong idLow, ulong usn)
            {
                if (context.IsAsyncLoggingEnabled)
                {
                    EnqueueLogAction(context, 713, () => StorageReadUsn_Core(context, idHigh, idLow, usn));
                }
                else
                {
                    StorageReadUsn_Core(context, idHigh, idLow, usn);
                }
            }

            private void StorageReadUsn_Core(global::BuildXL.Utilities.Instrumentation.Common.LoggingContext context, ulong idHigh, ulong idLow, ulong usn)
            {
                if (BuildXL.Native.ETWLogger.Log.IsEnabled(EventLevel.Verbose, (EventKeywords)268435456))
                {
                    BuildXL.Native.ETWLogger.Log.StorageReadUsn(context.Session.RelatedActivityId, idHigh, idLow, usn);
                }

                if (InspectMessageEnabled)
                {
                    InspectMessage(713, EventLevel.Verbose, string.Format(System.Globalization.CultureInfo.InvariantCulture, "Read USN: (id {0:X16}-{1:X16}) @ {2:X16}", idHigh, idLow, usn, idHigh, idLow, usn), null);
                }
            }

            /// <summary>
            /// Logging implementation
            /// </summary>
            public override void StorageCheckpointUsn(global::BuildXL.Utilities.Instrumentation.Common.LoggingContext context, ulong newUsn)
            {
                if (context.IsAsyncLoggingEnabled)
                {
                    EnqueueLogAction(context, 716, () => StorageCheckpointUsn_Core(context, newUsn));
                }
                else
                {
                    StorageCheckpointUsn_Core(context, newUsn);
                }
            }

            private void StorageCheckpointUsn_Core(global::BuildXL.Utilities.Instrumentation.Common.LoggingContext context, ulong newUsn)
            {
                if (BuildXL.Native.ETWLogger.Log.IsEnabled(EventLevel.Verbose, (EventKeywords)268435456))
                {
                    BuildXL.Native.ETWLogger.Log.StorageCheckpointUsn(context.Session.RelatedActivityId, newUsn);
                }

                if (InspectMessageEnabled)
                {
                    InspectMessage(716, EventLevel.Verbose, string.Format(System.Globalization.CultureInfo.InvariantCulture, "Checkpoint (new USN): {0:X16}", newUsn, newUsn), null);
                }
            }

            /// <summary>
            /// Logging implementation
            /// </summary>
            public override void StorageTryOpenOrCreateFileFailure(global::BuildXL.Utilities.Instrumentation.Common.LoggingContext context, string path, int creationDisposition, int hresult)
            {
                if (context.IsAsyncLoggingEnabled)
                {
                    EnqueueLogAction(context, 724, () => StorageTryOpenOrCreateFileFailure_Core(context, path, creationDisposition, hresult));
                }
                else
                {
                    StorageTryOpenOrCreateFileFailure_Core(context, path, creationDisposition, hresult);
                }
            }

            private void StorageTryOpenOrCreateFileFailure_Core(global::BuildXL.Utilities.Instrumentation.Common.LoggingContext context, string path, int creationDisposition, int hresult)
            {
                if (BuildXL.Native.ETWLogger.Log.IsEnabled(EventLevel.Verbose, (EventKeywords)268435456))
                {
                    BuildXL.Native.ETWLogger.Log.StorageTryOpenOrCreateFileFailure(context.Session.RelatedActivityId, path, creationDisposition, hresult);
                }

                if (InspectMessageEnabled)
                {
                    InspectMessage(724, EventLevel.Verbose, string.Format(System.Globalization.CultureInfo.InvariantCulture, "Creating a file handle for path {0} (disposition 0x{1:X8}) failed with HRESULT 0x{2:X8}", path, creationDisposition, hresult, path, creationDisposition, hresult), null);
                }
            }

            /// <summary>
            /// Logging implementation
            /// </summary>
            public override void StorageTryOpenDirectoryFailure(global::BuildXL.Utilities.Instrumentation.Common.LoggingContext context, string path, int hresult)
            {
                if (context.IsAsyncLoggingEnabled)
                {
                    EnqueueLogAction(context, 720, () => StorageTryOpenDirectoryFailure_Core(context, path, hresult));
                }
                else
                {
                    StorageTryOpenDirectoryFailure_Core(context, path, hresult);
                }
            }

            private void StorageTryOpenDirectoryFailure_Core(global::BuildXL.Utilities.Instrumentation.Common.LoggingContext context, string path, int hresult)
            {
                if (BuildXL.Native.ETWLogger.Log.IsEnabled(EventLevel.Verbose, (EventKeywords)268435456))
                {
                    BuildXL.Native.ETWLogger.Log.StorageTryOpenDirectoryFailure(context.Session.RelatedActivityId, path, hresult);
                }

                if (InspectMessageEnabled)
                {
                    InspectMessage(720, EventLevel.Verbose, string.Format(System.Globalization.CultureInfo.InvariantCulture, "Opening a directory handle for path {0} failed with HRESULT 0x{1:X8}", path, hresult, path, hresult), null);
                }
            }

            /// <summary>
            /// Logging implementation
            /// </summary>
            public override void StorageFoundVolume(global::BuildXL.Utilities.Instrumentation.Common.LoggingContext context, string volumeGuidPath, ulong serial)
            {
                if (context.IsAsyncLoggingEnabled)
                {
                    EnqueueLogAction(context, 721, () => StorageFoundVolume_Core(context, volumeGuidPath, serial));
                }
                else
                {
                    StorageFoundVolume_Core(context, volumeGuidPath, serial);
                }
            }

            private void StorageFoundVolume_Core(global::BuildXL.Utilities.Instrumentation.Common.LoggingContext context, string volumeGuidPath, ulong serial)
            {
                if (BuildXL.Native.ETWLogger.Log.IsEnabled(EventLevel.Verbose, (EventKeywords)268435456))
                {
                    BuildXL.Native.ETWLogger.Log.StorageFoundVolume(context.Session.RelatedActivityId, volumeGuidPath, serial);
                }

                if (InspectMessageEnabled)
                {
                    InspectMessage(721, EventLevel.Verbose, string.Format(System.Globalization.CultureInfo.InvariantCulture, "Found volume {0} (serial: {1:X16})", volumeGuidPath, serial, volumeGuidPath, serial), null);
                }
            }

            /// <summary>
            /// Logging implementation
            /// </summary>
            public override void StorageTryOpenFileByIdFailure(global::BuildXL.Utilities.Instrumentation.Common.LoggingContext context, ulong idHigh, ulong idLow, ulong volumeSerial, int hresult)
            {
                if (context.IsAsyncLoggingEnabled)
                {
                    EnqueueLogAction(context, 722, () => StorageTryOpenFileByIdFailure_Core(context, idHigh, idLow, volumeSerial, hresult));
                }
                else
                {
                    StorageTryOpenFileByIdFailure_Core(context, idHigh, idLow, volumeSerial, hresult);
                }
            }

            private void StorageTryOpenFileByIdFailure_Core(global::BuildXL.Utilities.Instrumentation.Common.LoggingContext context, ulong idHigh, ulong idLow, ulong volumeSerial, int hresult)
            {
                if (BuildXL.Native.ETWLogger.Log.IsEnabled(EventLevel.Verbose, (EventKeywords)268435456))
                {
                    BuildXL.Native.ETWLogger.Log.StorageTryOpenFileByIdFailure(context.Session.RelatedActivityId, idHigh, idLow, volumeSerial, hresult);
                }

                if (InspectMessageEnabled)
                {
                    InspectMessage(722, EventLevel.Verbose, string.Format(System.Globalization.CultureInfo.InvariantCulture, "Opening the file with file ID {0:X16}-{1:X16} on {2:X16} failed with HRESULT 0x{3:X8}", idHigh, idLow, volumeSerial, hresult, idHigh, idLow, volumeSerial, hresult), null);
                }
            }

            /// <summary>
            /// Logging implementation
            /// </summary>
            public override void DetouredProcessAccessViolationException(global::BuildXL.Utilities.Instrumentation.Common.LoggingContext context, string pipDescription)
            {
                if (context.IsAsyncLoggingEnabled)
                {
                    EnqueueLogAction(context, 734, () => DetouredProcessAccessViolationException_Core(context, pipDescription));
                }
                else
                {
                    DetouredProcessAccessViolationException_Core(context, pipDescription);
                }

                if (m_notifyContextWhenWarningsAreLogged)
                {
                    context.SpecifyWarningWasLogged();
                }
            }

            private void DetouredProcessAccessViolationException_Core(global::BuildXL.Utilities.Instrumentation.Common.LoggingContext context, string pipDescription)
            {
                if (BuildXL.Native.ETWLogger.Log.IsEnabled(EventLevel.Warning, (EventKeywords)1))
                {
                    BuildXL.Native.ETWLogger.Log.DetouredProcessAccessViolationException(context.Session.RelatedActivityId, pipDescription);
                }

                if (InspectMessageEnabled)
                {
                    InspectMessage(734, EventLevel.Warning, string.Format(System.Globalization.CultureInfo.InvariantCulture, "[{0}] AccessViolationException is occurred in Detours.", pipDescription, pipDescription), null);
                }
            }

            /// <summary>
            /// Logging implementation
            /// </summary>
            public override void MoreBytesWrittenThanBufferSize(global::BuildXL.Utilities.Instrumentation.Common.LoggingContext context, long bytesWritten, long bufferSizeInBytes, long numAssignedProcesses, long numProcessIdsInList)
            {
                if (context.IsAsyncLoggingEnabled)
                {
                    EnqueueLogAction(context, 2930, () => MoreBytesWrittenThanBufferSize_Core(context, bytesWritten, bufferSizeInBytes, numAssignedProcesses, numProcessIdsInList));
                }
                else
                {
                    MoreBytesWrittenThanBufferSize_Core(context, bytesWritten, bufferSizeInBytes, numAssignedProcesses, numProcessIdsInList);
                }
            }

            private void MoreBytesWrittenThanBufferSize_Core(global::BuildXL.Utilities.Instrumentation.Common.LoggingContext context, long bytesWritten, long bufferSizeInBytes, long numAssignedProcesses, long numProcessIdsInList)
            {
                if (BuildXL.Native.ETWLogger.Log.IsEnabled(EventLevel.Verbose, (EventKeywords)1))
                {
                    BuildXL.Native.ETWLogger.Log.MoreBytesWrittenThanBufferSize(context.Session.RelatedActivityId, bytesWritten, bufferSizeInBytes, numAssignedProcesses, numProcessIdsInList);
                }

                if (InspectMessageEnabled)
                {
                    InspectMessage(2930, EventLevel.Verbose, string.Format(System.Globalization.CultureInfo.InvariantCulture, "More bytes written than the buffer size: {0} > {1}. NumAssignedProcess: {2}, NumProcessIdsInList: {3}.", bytesWritten, bufferSizeInBytes, numAssignedProcesses, numProcessIdsInList, bytesWritten, bufferSizeInBytes, numAssignedProcesses, numProcessIdsInList), null);
                }
            }
        }

        private bool m_notifyContextWhenWarningsAreLogged = true;
    }
}

namespace BuildXL.Native
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::BuildXL.Utilities.Instrumentation.Common;
    using global::System.Diagnostics.Tracing;
    using global::System.Runtime.CompilerServices;

    /// <summary>
    /// Output logger that logs event into ETW
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("csc.exe", "4.1100.24.46003")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [EventSource(Name = "BuildXL.Native.ETWLogger")]
    public class ETWLogger : EventSource
    {
        private static readonly ETWLogger s_log = new ETWLogger();
        /// <summary>
        /// Gets the primary event source instance.
        /// </summary>
        public static ETWLogger Log
        {
            get
            {
                return s_log;
            }
        }

        private ETWLogger() 
#if NET_FRAMEWORK_451
          : base()
#else
        : base(EventSourceSettings.EtwSelfDescribingEventFormat)
#endif
        {
        }

        /// <summary>
        /// FileUtilitiesDirectoryDeleteFailed
        /// </summary>
        [Event(698, Level = EventLevel.Verbose, Keywords = (EventKeywords)1, Task = (EventTask)3, Message = "Directory delete for '{0}' failed. An error will be thrown.")]
        public unsafe void FileUtilitiesDirectoryDeleteFailed(Guid relatedActivityId, string path)
        {
            EventSource.EventData* data = stackalloc EventSource.EventData[1];
            path = path ?? String.Empty;
            fixed (char* pathBytes = path)
            {
                data[0].DataPointer = (IntPtr)pathBytes;
                data[0].Size = ((path.Length + 1) * 2);
                WriteEventWithRelatedActivityIdCore(698, &relatedActivityId, 1, data);
            }
        }

        /// <summary>
        /// FileUtilitiesDiagnostic
        /// </summary>
        [Event(699, Level = EventLevel.Verbose, Keywords = (EventKeywords)268435457, Task = (EventTask)3, Message = "Diagnostic for '{0}': {1}")]
        public unsafe void FileUtilitiesDiagnostic(Guid relatedActivityId, string path, string description)
        {
            EventSource.EventData* data = stackalloc EventSource.EventData[2];
            path = path ?? String.Empty;
            fixed (char* pathBytes = path)
            {
                data[0].DataPointer = (IntPtr)pathBytes;
                data[0].Size = ((path.Length + 1) * 2);
                description = description ?? String.Empty;
                fixed (char* descriptionBytes = description)
                {
                    data[1].DataPointer = (IntPtr)descriptionBytes;
                    data[1].Size = ((description.Length + 1) * 2);
                    WriteEventWithRelatedActivityIdCore(699, &relatedActivityId, 2, data);
                }
            }
        }

        /// <summary>
        /// RetryOnFailureException
        /// </summary>
        [Event(744, Level = EventLevel.Verbose, Keywords = (EventKeywords)268435457, Task = (EventTask)3, Message = "Retry attempt failed with exception. {0}")]
        public unsafe void RetryOnFailureException(Guid relatedActivityId, string exception)
        {
            EventSource.EventData* data = stackalloc EventSource.EventData[1];
            exception = exception ?? String.Empty;
            fixed (char* exceptionBytes = exception)
            {
                data[0].DataPointer = (IntPtr)exceptionBytes;
                data[0].Size = ((exception.Length + 1) * 2);
                WriteEventWithRelatedActivityIdCore(744, &relatedActivityId, 1, data);
            }
        }

        /// <summary>
        /// SettingOwnershipAndAcl
        /// </summary>
        [Event(704, Level = EventLevel.Verbose, Keywords = (EventKeywords)1, Task = (EventTask)3, Message = "Attempting to set ownership and ACL to path '{0}'.")]
        public unsafe void SettingOwnershipAndAcl(Guid relatedActivityId, string path)
        {
            EventSource.EventData* data = stackalloc EventSource.EventData[1];
            path = path ?? String.Empty;
            fixed (char* pathBytes = path)
            {
                data[0].DataPointer = (IntPtr)pathBytes;
                data[0].Size = ((path.Length + 1) * 2);
                WriteEventWithRelatedActivityIdCore(704, &relatedActivityId, 1, data);
            }
        }

        /// <summary>
        /// SettingOwnershipAndAclFailed
        /// </summary>
        [Event(705, Level = EventLevel.Verbose, Keywords = (EventKeywords)1, Task = (EventTask)3, Message = "Failed to set ownership and ACL to path '{0}'. Command {1} {2} {3}")]
        public unsafe void SettingOwnershipAndAclFailed(Guid relatedActivityId, string path, string filename, string arguments, string reason)
        {
            EventSource.EventData* data = stackalloc EventSource.EventData[4];
            path = path ?? String.Empty;
            fixed (char* pathBytes = path)
            {
                data[0].DataPointer = (IntPtr)pathBytes;
                data[0].Size = ((path.Length + 1) * 2);
                filename = filename ?? String.Empty;
                fixed (char* filenameBytes = filename)
                {
                    data[1].DataPointer = (IntPtr)filenameBytes;
                    data[1].Size = ((filename.Length + 1) * 2);
                    arguments = arguments ?? String.Empty;
                    fixed (char* argumentsBytes = arguments)
                    {
                        data[2].DataPointer = (IntPtr)argumentsBytes;
                        data[2].Size = ((arguments.Length + 1) * 2);
                        reason = reason ?? String.Empty;
                        fixed (char* reasonBytes = reason)
                        {
                            data[3].DataPointer = (IntPtr)reasonBytes;
                            data[3].Size = ((reason.Length + 1) * 2);
                            WriteEventWithRelatedActivityIdCore(705, &relatedActivityId, 4, data);
                        }
                    }
                }
            }
        }

        /// <summary>
        /// StorageReadUsn
        /// </summary>
        [Event(713, Level = EventLevel.Verbose, Keywords = (EventKeywords)268435456, Task = (EventTask)3, Message = "Read USN: (id {0:X16}-{1:X16}) @ {2:X16}")]
        public unsafe void StorageReadUsn(Guid relatedActivityId, ulong idHigh, ulong idLow, ulong usn)
        {
            EventSource.EventData* data = stackalloc EventSource.EventData[3];
            data[0].DataPointer = (IntPtr)(&idHigh);
            data[0].Size = sizeof(ulong);
            data[1].DataPointer = (IntPtr)(&idLow);
            data[1].Size = sizeof(ulong);
            data[2].DataPointer = (IntPtr)(&usn);
            data[2].Size = sizeof(ulong);
            WriteEventWithRelatedActivityIdCore(713, &relatedActivityId, 3, data);
        }

        /// <summary>
        /// StorageCheckpointUsn
        /// </summary>
        [Event(716, Level = EventLevel.Verbose, Keywords = (EventKeywords)268435456, Task = (EventTask)3, Message = "Checkpoint (new USN): {0:X16}")]
        public unsafe void StorageCheckpointUsn(Guid relatedActivityId, ulong newUsn)
        {
            EventSource.EventData* data = stackalloc EventSource.EventData[1];
            data[0].DataPointer = (IntPtr)(&newUsn);
            data[0].Size = sizeof(ulong);
            WriteEventWithRelatedActivityIdCore(716, &relatedActivityId, 1, data);
        }

        /// <summary>
        /// StorageTryOpenOrCreateFileFailure
        /// </summary>
        [Event(724, Level = EventLevel.Verbose, Keywords = (EventKeywords)268435456, Task = (EventTask)3, Message = "Creating a file handle for path {0} (disposition 0x{1:X8}) failed with HRESULT 0x{2:X8}")]
        public unsafe void StorageTryOpenOrCreateFileFailure(Guid relatedActivityId, string path, int creationDisposition, int hresult)
        {
            EventSource.EventData* data = stackalloc EventSource.EventData[3];
            path = path ?? String.Empty;
            fixed (char* pathBytes = path)
            {
                data[0].DataPointer = (IntPtr)pathBytes;
                data[0].Size = ((path.Length + 1) * 2);
                data[1].DataPointer = (IntPtr)(&creationDisposition);
                data[1].Size = sizeof(int);
                data[2].DataPointer = (IntPtr)(&hresult);
                data[2].Size = sizeof(int);
                WriteEventWithRelatedActivityIdCore(724, &relatedActivityId, 3, data);
            }
        }

        /// <summary>
        /// StorageTryOpenDirectoryFailure
        /// </summary>
        [Event(720, Level = EventLevel.Verbose, Keywords = (EventKeywords)268435456, Task = (EventTask)3, Message = "Opening a directory handle for path {0} failed with HRESULT 0x{1:X8}")]
        public unsafe void StorageTryOpenDirectoryFailure(Guid relatedActivityId, string path, int hresult)
        {
            EventSource.EventData* data = stackalloc EventSource.EventData[2];
            path = path ?? String.Empty;
            fixed (char* pathBytes = path)
            {
                data[0].DataPointer = (IntPtr)pathBytes;
                data[0].Size = ((path.Length + 1) * 2);
                data[1].DataPointer = (IntPtr)(&hresult);
                data[1].Size = sizeof(int);
                WriteEventWithRelatedActivityIdCore(720, &relatedActivityId, 2, data);
            }
        }

        /// <summary>
        /// StorageFoundVolume
        /// </summary>
        [Event(721, Level = EventLevel.Verbose, Keywords = (EventKeywords)268435456, Task = (EventTask)3, Message = "Found volume {0} (serial: {1:X16})")]
        public unsafe void StorageFoundVolume(Guid relatedActivityId, string volumeGuidPath, ulong serial)
        {
            EventSource.EventData* data = stackalloc EventSource.EventData[2];
            volumeGuidPath = volumeGuidPath ?? String.Empty;
            fixed (char* volumeGuidPathBytes = volumeGuidPath)
            {
                data[0].DataPointer = (IntPtr)volumeGuidPathBytes;
                data[0].Size = ((volumeGuidPath.Length + 1) * 2);
                data[1].DataPointer = (IntPtr)(&serial);
                data[1].Size = sizeof(ulong);
                WriteEventWithRelatedActivityIdCore(721, &relatedActivityId, 2, data);
            }
        }

        /// <summary>
        /// StorageTryOpenFileByIdFailure
        /// </summary>
        [Event(722, Level = EventLevel.Verbose, Keywords = (EventKeywords)268435456, Task = (EventTask)3, Message = "Opening the file with file ID {0:X16}-{1:X16} on {2:X16} failed with HRESULT 0x{3:X8}")]
        public unsafe void StorageTryOpenFileByIdFailure(Guid relatedActivityId, ulong idHigh, ulong idLow, ulong volumeSerial, int hresult)
        {
            EventSource.EventData* data = stackalloc EventSource.EventData[4];
            data[0].DataPointer = (IntPtr)(&idHigh);
            data[0].Size = sizeof(ulong);
            data[1].DataPointer = (IntPtr)(&idLow);
            data[1].Size = sizeof(ulong);
            data[2].DataPointer = (IntPtr)(&volumeSerial);
            data[2].Size = sizeof(ulong);
            data[3].DataPointer = (IntPtr)(&hresult);
            data[3].Size = sizeof(int);
            WriteEventWithRelatedActivityIdCore(722, &relatedActivityId, 4, data);
        }

        /// <summary>
        /// DetouredProcessAccessViolationException
        /// </summary>
        [Event(734, Level = EventLevel.Warning, Keywords = (EventKeywords)1, Task = (EventTask)5, Message = "[{0}] AccessViolationException is occurred in Detours.")]
        public unsafe void DetouredProcessAccessViolationException(Guid relatedActivityId, string pipDescription)
        {
            EventSource.EventData* data = stackalloc EventSource.EventData[1];
            pipDescription = pipDescription ?? String.Empty;
            fixed (char* pipDescriptionBytes = pipDescription)
            {
                data[0].DataPointer = (IntPtr)pipDescriptionBytes;
                data[0].Size = ((pipDescription.Length + 1) * 2);
                WriteEventWithRelatedActivityIdCore(734, &relatedActivityId, 1, data);
            }
        }

        /// <summary>
        /// MoreBytesWrittenThanBufferSize
        /// </summary>
        [Event(2930, Level = EventLevel.Verbose, Keywords = (EventKeywords)1, Task = (EventTask)9, Message = "More bytes written than the buffer size: {0} > {1}. NumAssignedProcess: {2}, NumProcessIdsInList: {3}.")]
        public unsafe void MoreBytesWrittenThanBufferSize(Guid relatedActivityId, long bytesWritten, long bufferSizeInBytes, long numAssignedProcesses, long numProcessIdsInList)
        {
            EventSource.EventData* data = stackalloc EventSource.EventData[4];
            data[0].DataPointer = (IntPtr)(&bytesWritten);
            data[0].Size = sizeof(long);
            data[1].DataPointer = (IntPtr)(&bufferSizeInBytes);
            data[1].Size = sizeof(long);
            data[2].DataPointer = (IntPtr)(&numAssignedProcesses);
            data[2].Size = sizeof(long);
            data[3].DataPointer = (IntPtr)(&numProcessIdsInList);
            data[3].Size = sizeof(long);
            WriteEventWithRelatedActivityIdCore(2930, &relatedActivityId, 4, data);
        }

        /// <summary>
        /// Event Keywords
        /// </summary>
        public static class Keywords
        {
            /// <summary>
            /// Diagnostics
            /// </summary>
            public const EventKeywords Diagnostics = (EventKeywords)(268435456);
            /// <summary>
            /// UserMessage
            /// </summary>
            public const EventKeywords UserMessage = (EventKeywords)(1);
            /// <summary>
            /// Progress
            /// </summary>
            public const EventKeywords Progress = (EventKeywords)(2);
            /// <summary>
            /// Overwritable
            /// </summary>
            public const EventKeywords Overwritable = (EventKeywords)(8);
            /// <summary>
            /// OverwritableOnly
            /// </summary>
            public const EventKeywords OverwritableOnly = (EventKeywords)(16);
            /// <summary>
            /// ExternalEtwOnly
            /// </summary>
            public const EventKeywords ExternalEtwOnly = (EventKeywords)(32);
            /// <summary>
            /// InfrastructureIssue
            /// </summary>
            public const EventKeywords InfrastructureIssue = (EventKeywords)(64);
            /// <summary>
            /// UserError
            /// </summary>
            public const EventKeywords UserError = (EventKeywords)(128);
            /// <summary>
            /// NotForwardedToOrchestrator
            /// </summary>
            public const EventKeywords NotForwardedToOrchestrator = (EventKeywords)(256);
            /// <summary>
            /// SelectivelyEnabled
            /// </summary>
            public const EventKeywords SelectivelyEnabled = (EventKeywords)(512);
        }

        /// <summary>
        /// Event Tasks
        /// </summary>
        public static class Tasks
        {
            /// <summary>
            /// Scheduler
            /// </summary>
            public const EventTask Scheduler = (EventTask)(1);
            /// <summary>
            /// Parser
            /// </summary>
            public const EventTask Parser = (EventTask)(2);
            /// <summary>
            /// Storage
            /// </summary>
            public const EventTask Storage = (EventTask)(3);
            /// <summary>
            /// UnitTest
            /// </summary>
            public const EventTask UnitTest = (EventTask)(4);
            /// <summary>
            /// SandboxedProcessExecutor
            /// </summary>
            public const EventTask SandboxedProcessExecutor = (EventTask)(5);
            /// <summary>
            /// Engine
            /// </summary>
            public const EventTask Engine = (EventTask)(6);
            /// <summary>
            /// Viewer
            /// </summary>
            public const EventTask Viewer = (EventTask)(7);
            /// <summary>
            /// UnitTest2
            /// </summary>
            public const EventTask UnitTest2 = (EventTask)(8);
            /// <summary>
            /// PipExecutor
            /// </summary>
            public const EventTask PipExecutor = (EventTask)(9);
            /// <summary>
            /// ChangeJournalService
            /// </summary>
            public const EventTask ChangeJournalService = (EventTask)(10);
            /// <summary>
            /// HostApplication
            /// </summary>
            public const EventTask HostApplication = (EventTask)(11);
            /// <summary>
            /// CommonInfrastructure
            /// </summary>
            public const EventTask CommonInfrastructure = (EventTask)(12);
            /// <summary>
            /// CacheInteraction
            /// </summary>
            public const EventTask CacheInteraction = (EventTask)(13);
            /// <summary>
            /// Debugger
            /// </summary>
            public const EventTask Debugger = (EventTask)(14);
            /// <summary>
            /// Analyzers
            /// </summary>
            public const EventTask Analyzers = (EventTask)(15);
            /// <summary>
            /// PipInputAssertions
            /// </summary>
            public const EventTask PipInputAssertions = (EventTask)(16);
            /// <summary>
            /// Distribution
            /// </summary>
            public const EventTask Distribution = (EventTask)(17);
            /// <summary>
            /// CriticalPaths
            /// </summary>
            public const EventTask CriticalPaths = (EventTask)(18);
            /// <summary>
            /// ChangeDetection
            /// </summary>
            public const EventTask ChangeDetection = (EventTask)(19);
            /// <summary>
            /// Unclassified
            /// </summary>
            public const EventTask Unclassified = (EventTask)(20);
            /// <summary>
            /// LanguageServer
            /// </summary>
            public const EventTask LanguageServer = (EventTask)(21);
            /// <summary>
            /// ExecutionAnalyzers
            /// </summary>
            public const EventTask ExecutionAnalyzers = (EventTask)(22);
            /// <summary>
            /// Plugin
            /// </summary>
            public const EventTask Plugin = (EventTask)(23);
            /// <summary>
            /// Max
            /// </summary>
            public const EventTask Max = (EventTask)(23);
        }
    }
}